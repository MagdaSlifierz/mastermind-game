from fastapi import APIRouter, Depends, status, HTTPException
from fastapi.security import OAuth2PasswordRequestForm
from fastapi.security import OAuth2PasswordBearer
from schemas.user_schema import UserModel
from utils.hash import Hash

router = APIRouter()

oauth2_scheme = OAuth2PasswordBearer(tokenUrl="signin")


@router.post("/signup", status_code=status.HTTP_201_CREATED)
def signup(request: UserModel):
    hashed_password = Hash.hash_password(request.password)
    return {"data": {"message": "User created successfully", "username": request.username, "password": hashed_password}}


@router.post("/signin", status_code=status.HTTP_200_OK)
def signin(request: OAuth2PasswordRequestForm = Depends()):
    if request.username != "stassarosek":
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Invalid username")
    if not Hash.verify_password(request.password, "$2b$12$J6w7kqx.yrW4QA9CTnN2uuIt6NUZDYYyKxCuy3daRUpMZVstUZpz6"):
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Invalid password")
    access_token = Hash.create_access_token(data={"sub": request.username})
    return {"data": {"message": "User logged in successfully", "access_token": access_token, "token_type": "bearer"}}


@router.get("/me", status_code=status.HTTP_200_OK)
def me(access_token: str = Depends(oauth2_scheme)):
    credentials_exception = HTTPException(status_code=status.HTTP_401_UNAUTHORIZED,
                                          detail="Could not validate credentials",
                                          headers={"WWW-Authenticate": "Bearer"})
    return Hash.verify_token(access_token, credentials_exception)
